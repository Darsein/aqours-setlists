= javascript_include_tag 'https://d3js.org/d3.v5.min.js'

.container
  .row
    .col.s8
      #main
    .col.s4
      aside style="margin-top: 180px;"
        select#order
          option value="title" タイトル
          option value="count" 披露された回数
          option value="group" 最初に披露されたイベント

/! Source: https://bost.ocks.org/mike/miserables/
sass:
  .background
    fill: #eee
  line
    stroke: #fff
  text.active
    fill: red
    font-weight: bold
  svg
    font-size: 10px

javascript:
    var margin = {top: 180, right: 0, bottom: 10, left: 180},
        width = 640,
        height = 640;

    var x = d3.scaleBand().range([0, width]),
        z = d3.scaleLinear().domain([0, 4]).clamp(true);

    var c = [
        "orange", // 君ここイベ
        "aqua", // 夏祭り課外活動
        "red", // 冬休み課外活動
        "skyblue", // 1st
        "midnightblue", // 2nd
        "deeppink", // T-SPOOK
        "greenyellow", // 電撃ライブ
        "crimson" // 函館UC
    ];

    var svg = d3.select("#main").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    d3.json("/cooccurrence_graph/data").then(function (data) {
        var matrix = [],
            nodes = data.nodes,
            n = nodes.length;

        // Compute index per node.
        nodes.forEach(function (node, i) {
            node.index = i;
            matrix[i] = d3.range(n).map(function (j) {
                return {x: j, y: i, z: 0};
            });
        });

        // Convert links to matrix; count song occurrences.
        data.links.forEach(function (link) {
            matrix[link.source][link.target].z = link.value;
        });

        // Precompute the orders.
        var orders = {
            title: d3.range(n).sort(function (a, b) {
                return d3.ascending(nodes[a].title, nodes[b].title);
            }),
            count: d3.range(n).sort(function (a, b) {
                return nodes[b].count - nodes[a].count;
            }),
            group: d3.range(n).sort(function (a, b) {
                return -(nodes[b].group - nodes[a].group);
            })
        };

        // The default sort order.
        x.domain(orders.title);

        svg.append("rect")
            .attr("class", "background")
            .attr("width", width)
            .attr("height", height);

        var row = svg.selectAll(".row")
            .data(matrix)
            .enter().append("g")
            .attr("class", "row")
            .attr("transform", function (d, i) {
                return "translate(0," + x(i) + ")";
            })
            .each(row);

        row.append("line")
            .attr("x2", width);

        row.append("text")
            .attr("x", -6)
            .attr("y", x.bandwidth() / 2)
            .attr("dy", ".32em")
            .attr("text-anchor", "end")
            .text(function (d, i) {
                return nodes[i].title;
            });

        var column = svg.selectAll(".column")
            .data(matrix)
            .enter().append("g")
            .attr("class", "column")
            .attr("transform", function (d, i) {
                return "translate(" + x(i) + ")rotate(-90)";
            });

        column.append("line")
            .attr("x1", -width);

        column.append("text")
            .attr("x", 6)
            .attr("y", x.bandwidth() / 2)
            .attr("dy", ".32em")
            .attr("text-anchor", "start")
            .text(function (d, i) {
                return nodes[i].title;
            });

        function row(row) {
            var cell = d3.select(this).selectAll(".cell")
                .data(row.filter(function (d) {
                    return d.z;
                }))
                .enter().append("rect")
                .attr("class", "cell")
                .attr("x", function (d) {
                    return x(d.x);
                })
                .attr("width", x.bandwidth())
                .attr("height", x.bandwidth())
                .style("fill-opacity", function (d) {
                    return z(d.z);
                })
                .style("fill", function (d) {
                    return nodes[d.x].group == nodes[d.y].group ? c[nodes[d.x].group - 1] : "gray";
                })
                .on("mouseover", mouseover)
                .on("mouseout", mouseout);
        }

        function mouseover(p) {
            d3.selectAll(".row text").classed("active", function (d, i) {
                return i == p.y;
            });
            d3.selectAll(".column text").classed("active", function (d, i) {
                return i == p.x;
            });
        }

        function mouseout() {
            d3.selectAll("text").classed("active", false);
        }

        d3.select("#order").on("change", function () {
            clearTimeout(timeout);
            order(this.value);
        });

        function order(value) {
            x.domain(orders[value]);

            var t = svg.transition().duration(2500);

            t.selectAll(".row")
                .delay(function (d, i) {
                    return x(i) * 4;
                })
                .attr("transform", function (d, i) {
                    return "translate(0," + x(i) + ")";
                })
                .selectAll(".cell")
                .delay(function (d) {
                    return x(d.x) * 4;
                })
                .attr("x", function (d) {
                    return x(d.x);
                });

            t.selectAll(".column")
                .delay(function (d, i) {
                    return x(i) * 4;
                })
                .attr("transform", function (d, i) {
                    return "translate(" + x(i) + ")rotate(-90)";
                });
        }

        var timeout = setTimeout(function () {
            order("group");
            d3.select("#order").property("selectedIndex", 2).node().focus();
            $('select').formSelect();
        }, 5000);
    });
