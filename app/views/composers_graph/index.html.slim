= javascript_include_tag 'https://d3js.org/d3.v5.min.js'

.container
  .row
    .col.s12
      svg width="1000" height="1000"

javascript:
    var svg = d3.select("svg"),
        width = +svg.attr("width"),
        height = +svg.attr("height");
    var aspectRatio = width / height;

    svg.attr("viewBox", "0 0 " + width + " " + height)
        .attr("preserveAspectRatio", "xMidYMid meet");

    d3.select(window)
        .on("resize", function () {
            var targetWidth = svg.node().getBoundingClientRect().width;
            svg.attr("width", targetWidth);
            svg.attr("height", targetWidth / aspectRatio);
        });

    var simulation = d3.forceSimulation()
        .force("link", d3.forceLink())
        .force("charge", d3.forceManyBody().strength(function (d) {
            return d.count ? -50 * d.count : -50;
        }))
        .force("center", d3.forceCenter(width / 2, height / 2))
        .force("x", d3.forceX().strength(0.1).x(width / 2))
        .force("y", d3.forceY().strength(0.1).y(height / 2));

    d3.json("composers_graph/data").then(function (data) {
        var link = svg.append("g")
            .attr("class", "links")
            .selectAll("line")
            .data(data.links)
            .enter().append("line");

        var node = svg.append("g")
            .attr("class", "nodes")
            .selectAll("g")
            .data(data.nodes)
            .enter().append("g")
            .attr("class", function (d) {
                return d.class
            });

        node.append("circle")
            .attr("r", function (d) {
                return d.count ? 2 * d.count + 1 : 3;
            })
            .call(d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
                .on("end", dragended));

        node.append("text")
            .attr("font-size", function (d) {
                return (d.count ? 2 * d.count + 8 : 10) + "px";
            })
            .text(function (d) {
                return d.text;
            });

        simulation
            .nodes(data.nodes)
            .on("tick", ticked);

        simulation.force("link")
            .links(data.links);

        function ticked() {
            link
                .attr("x1", function (d) {
                    return d.source.x;
                })
                .attr("y1", function (d) {
                    return d.source.y;
                })
                .attr("x2", function (d) {
                    return d.target.x;
                })
                .attr("y2", function (d) {
                    return d.target.y;
                });

            node.attr("transform", function (d) {
                return "translate(" + d.x + "," + d.y + ")";
            });
        }
    });

    function dragstarted(d) {
        if (!d3.event.active) simulation.alphaTarget(0.3).restart();
        d.fx = d.x;
        d.fy = d.y;
    }

    function dragged(d) {
        d.fx = d3.event.x;
        d.fy = d3.event.y;
    }

    function dragended(d) {
        if (!d3.event.active) simulation.alphaTarget(0);
        d.fx = null;
        d.fy = null;
    }


